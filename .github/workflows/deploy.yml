name: Deploy

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success'
    steps:
    - name: Debug workflow info
      run: |
        echo "Workflow run ref: ${{ github.event.workflow_run.ref }}"
        echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"

    - name: Deploy to VM
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        
        # Add host to known hosts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Get the commit SHA instead of tag
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        SHORT_SHA=$(echo $COMMIT_SHA | cut -c1-7)
        REPO_OWNER="ryaneggz"
        REPO_NAME="slack-agent"
        IMAGE_NAME="${REPO_OWNER}/${REPO_NAME}:${SHORT_SHA}"
        CONTAINER_NAME="slack_agent"
        SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}
        SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
        BASE_API_URL=http://localhost:8000
        APP_USERNAME=aiuser
        APP_PASSWORD=${{ secrets.APP_PASSWORD }}
        
        # SSH into server and deploy
        ssh -i ~/.ssh/id_ed25519 $SSH_USER@$SSH_HOST "
          set -e  # Exit immediately if a command fails
          
          echo 'User: $(whoami)'
          echo 'Hostname: $(hostname)'
          echo 'OS: $(uname -a)'
          echo 'Uptime: $(uptime -p)'
          docker ps

          echo "Using image: $IMAGE_NAME"

          # Step 2: Pull the specified image tag
          echo "Pulling the specified image..."
          docker pull $IMAGE_NAME || { echo "Failed to pull image"; exit 1; }

          # Step 3: Rename the current container (if it exists) for backup
          echo "Preparing backup of current container..."
          if docker ps -a | grep -q $CONTAINER_NAME; then
              docker rename $CONTAINER_NAME $CONTAINER_NAME-backup || true
              docker stop $CONTAINER_NAME-backup || true
          fi

          # Step 4: Start the new container with docker run
          echo "Starting the new $CONTAINER_NAME container..."
          if docker run -d \
              --name $CONTAINER_NAME \
              --restart always \
              --network host \
              -e SLACK_APP_TOKEN=$SLACK_APP_TOKEN \
              -e SLACK_BOT_TOKEN=$SLACK_BOT_TOKEN \
              -e BASE_API_URL=$BASE_API_URL \
              -e APP_USERNAME=$APP_USERNAME \
              -e APP_PASSWORD=$APP_PASSWORD \
              $IMAGE_NAME; then
              
              # Step 5: Verify the new container is running properly
              echo "Waiting for container health check..."
              sleep 10  # Wait for container to initialize
              
              if docker ps | grep -q $CONTAINER_NAME; then
                  echo "New container is running successfully"
                  
                  # Clean up the backup container and old images
                  echo "Cleaning up backup and old images..."
                  docker rm $CONTAINER_NAME-backup || true

                  
                  echo "Deployment successful!"
              else
                  echo "New container failed to start properly. Rolling back..."
                  docker stop $CONTAINER_NAME || true
                  docker rm $CONTAINER_NAME || true
                  docker rename $CONTAINER_NAME-backup $CONTAINER_NAME || true
                  docker start $CONTAINER_NAME || true
                  echo "Rollback completed. Previous version restored."
                  exit 1
              fi
          else
              echo "Failed to start new container. Rolling back..."
              docker rename $CONTAINER_NAME-backup $CONTAINER_NAME || true
              docker start $CONTAINER_NAME || true
              echo "Rollback completed. Previous version restored."
              exit 1
          fi

          echo "SlackAgent container has been successfully updated and is set to restart always."
        "
